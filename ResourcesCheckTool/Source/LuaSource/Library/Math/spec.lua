require 'telescope'
local _ = require 'mlib'

context( 'The module',   
	function()	
		before( function() end )
		after( function() end ) 
		
		local function check_fuzzy( a, b )
			return ( a - .00001 <= b and b <= a + .00001 )
		end
		
		make_assertion( 'fuzzy_equal', 'fuzzy values to be equal to each other', 
			function( a, b )
				return check_fuzzy( a, b ) 
			end 
		)
		make_assertion( 'multiple_fuzzy_equal', 'all fuzzy values to equal respective fuzzy value', 
			function( a, b )
				for i = 1, #a do 
					if type( a[i] ) ~= 'number' then 
						if a[i] ~= b[i] then return false end 
					else 
						if not check_fuzzy( a[i], b[i] ) then 
							return false 
						end 
					end 
				end 
				return true 
			end 
		)
		
		context( 'line.length', function()
			test( 'gives the distance between two coordinates.', function()
				assert_fuzzy_equal( _.line.length( 0, 0, 3, 0 ), 3 )
				assert_fuzzy_equal( _.line.length( 3, 4, 0, 0 ), 5 )
				assert_fuzzy_equal( _.line.length( 5, 4, 6, 1 ), 3.16227766017 ) 
				assert_fuzzy_equal( _.line.length( 7.48, 2.5, 6.54, 4.54 ), 2.24615226554 )
			end ) 
			
			test( 'can get the distance between a single point.', function()
				assert_fuzzy_equal( _.line.length( 3, 2, 3, 2 ), 0 )
			end )
		end )
		
		context( 'line.midpoint', function()
			test( 'gives the midpoint between two coordinates.', function()
				assert_multiple_fuzzy_equal( { _.line.midpoint( 0, 0, 3, 0 ) }, { 1.5, 0 } )
				assert_multiple_fuzzy_equal( { _.line.midpoint( 3, 4, 0, 0 ) }, { 1.5, 2 } )
				assert_multiple_fuzzy_equal( { _.line.midpoint( 5, 4, 6, 1 ) }, { 5.5, 2.5 } )
				assert_multiple_fuzzy_equal( { _.line.midpoint( 7.48, 2.5, 6.54, 4.54 ) }, { 7.01, 3.52 } )
			end )
			
			test( 'can get the midpoint of a single point.', function()
				assert_multiple_fuzzy_equal( { _.line.midpoint( 3, 2, 3, 2 ) }, { 3, 2 } )
			end )
		end )
		
		context( 'line.slope', function()
			test( 'gives the slope between two points.', function()
				assert_fuzzy_equal( _.line.slope( 0, 0, 3, 0 ), 0 )
				assert_fuzzy_equal( _.line.slope( 3, 4, 0, 0 ), 4 / 3 )
				assert_fuzzy_equal( _.line.slope( 5, 4, 6, 1 ), -3 ) 
				assert_fuzzy_equal( _.line.slope( 7.48, 2.5, 6.54, 4.54 ), -2.17021276596 )
			end )
			
			test( 'returns false if the line is vertical (x1 == x2).', function()
				assert_false( _.line.slope( 3, 2, 3, 4 ) )
			end )
		end )
		
		context( 'line.perpendicularSlope', function()
			test( 'gives the perpendicular slope using the slope.', function()
				assert_fuzzy_equal( _.line.perpendicularSlope( 4 / 3 ), -.75 )
				assert_fuzzy_equal( _.line.perpendicularSlope( -3 ), 1/3 ) 
				assert_fuzzy_equal( _.line.perpendicularSlope( -2.17021276596 ), 0.46078431372 )
			end )
			
			test( 'gives the perpendicular slope using the points.', function()
				assert_fuzzy_equal( _.line.perpendicularSlope( 3, 4, 0, 0 ), -.75 )
				assert_fuzzy_equal( _.line.perpendicularSlope( 5, 4, 6, 1 ), 1/3 ) 
				assert_fuzzy_equal( _.line.perpendicularSlope( 7.48, 2.5, 6.54, 4.54 ), 0.46078431372 )
			end )
			
			test( 'gives the perpendicular slope to vertical lines.', function()
				assert_fuzzy_equal( _.line.perpendicularSlope( 1 / 0 ), 0 )
				assert_fuzzy_equal( _.line.perpendicularSlope( 3, 2, 3, 4 ), 0 )
			end )
			
			test( 'returns false if the perpendicular slope if vertical.', function()
				assert_false( _.line.perpendicularSlope( 0 ) )
				assert_false( _.line.perpendicularSlope( 0, 0, 3, 0 ) )
			end )
		end )
		
		context( 'line.perpendicularBisector', function()
			test( 'gives the perpendicular bisector.', function()
				assert_multiple_fuzzy_equal( { _.line.perpendicularBisector( 3, 4, 0, 0 ) }, { -.75, 1.5, 2 } )
				assert_multiple_fuzzy_equal( { _.line.perpendicularBisector( 5, 4, 6, 1 ) }, { 1 / 3, 5.5, 2.5 } ) 
				assert_multiple_fuzzy_equal( { _.line.perpendicularBisector( 7.48, 2.5, 6.54, 4.54 ) }, { .4607843, 7.01, 3.52 } )
			end )
			
			test( 'gives the perpendicular bisector to vertical lines.', function()
				assert_multiple_fuzzy_equal( { _.line.perpendicularBisector( 3, 2, 3, 4 ) }, { 0, 3, 3 } )
			end )
			
			test( 'returns false, x, y if the perpendicular bisector is vertical.', function()
				assert_multiple_fuzzy_equal( { _.line.perpendicularBisector( 0, 0, 3, 0 ) }, { false, 1.5, 0 } )
			end )
		end )
		
		context( 'line.intercept', function()
			test( 'gives the y-intercept using the points and slope.', function()
				assert_fuzzy_equal( _.line.intercept( 0, 0, 0 ), 0 )
				assert_fuzzy_equal( _.line.intercept( 3, 4, 4 / 3 ), 0 )
				assert_fuzzy_equal( _.line.intercept( 5, 4, -3 ), 19 ) 
				assert_fuzzy_equal( _.line.intercept( 7.48, 2.5, -2.17021276596 ), 18.7331914893617 )
			end )
			
			test( 'gives the y-intercept using the points.', function()
				assert_fuzzy_equal( _.line.intercept( 0, 0, 3, 0 ), 0 )
				assert_fuzzy_equal( _.line.intercept( 3, 4, 0, 0 ), 0 )
				assert_fuzzy_equal( _.line.intercept( 5, 4, 6, 1 ), 19 ) 
				assert_fuzzy_equal( _.line.intercept( 7.48, 2.5, 6.54, 4.54 ), 18.7331914893617 )
			end )
			
			test( 'returns false for vertical lines.', function()
				assert_false( _.line.intercept( 3, 2, 3, 4 ) )
				assert_false( _.line.intercept( 3, 2, false ) )
			end )
		end )
		
		context( 'line.func.get', function()
			test( 'gives the exponential function of two points.', function()
				assert_multiple_fuzzy_equal( { _.line.func.get( 1, 2, 2, 2 ) }, { 2, 1 } )
				assert_multiple_fuzzy_equal( { _.line.func.get( 2, 10, -1, .5 ) }, { 1.35720199237, 2.71441761659 } )
			end )
			
			test( 'returns false if one/both ys is/are <= 0.', function()
				assert_false( _.line.func.get( 0, 1, 1, -3 ) )
				assert_false( _.line.func.get( 5, -2, 3, 3 ) )
			end )
			
			test( 'returns false if the xs are the same.', function()
				assert_false( _.line.func.get( 0, 1, 0, 3 ) )
			end )
		end )
		
		context( 'polygon.triangleHeight', function()
			test( 'gives the height of a triangle given the base and area.', function()
				assert_fuzzy_equal( _.polygon.triangleHeight( 4, 10 ), 5 )
				assert_fuzzy_equal( _.polygon.triangleHeight( 5, 10 ), 4 )
			end )
			
			test( 'gives the height of a triangle given the base and points. Returns height and area.', function()
				assert_multiple_fuzzy_equal( { _.polygon.triangleHeight( 4, 2, 6, 2, 1, 6, 1 ) }, { 5, 10 } )
				assert_multiple_fuzzy_equal( { _.polygon.triangleHeight( 5, 1, 3, 6, 3, 1, 7 ) }, { 4, 10 } )
			end )
			
			test( 'can get the height of non-right triangles.', function()
				assert_fuzzy_equal( _.polygon.triangleHeight( 6.32, 5 ), 1.58227848101 )
				assert_multiple_fuzzy_equal( { _.polygon.triangleHeight( 6.32, 8, 6, 9, 8, 14, 8 ) }, { 1.58227848101, 5 } )
			end )
		end )
		
		context( 'circle.area', function()
			test( 'gives the area of a circle.', function()
				assert_fuzzy_equal( _.circle.area( 1 ), 3.14159265359 )
				assert_fuzzy_equal( _.circle.area( 2 ), 12.5663706144 )
				assert_fuzzy_equal( _.circle.area( 10 ), 314.159265359 )
				assert_fuzzy_equal( _.circle.area( 57	), 10207.0345315 )
			end )
		end )
		
		context( 'stats.mean', function()
			test( 'gives the mean (average).', function()
				assert_fuzzy_equal( _.stats.mean( 1, 2, 3, 4, 5 ), 3 )
				assert_fuzzy_equal( _.stats.mean( 5, 4, 1, -7, 0, 19 ), 3 + 2 / 3 )
				assert_fuzzy_equal( _.stats.mean( math.pi, 12, -8 ), 2.38053088453 )
			end )
			
			test( 'gives the mean with tables.', function()
				assert_fuzzy_equal( _.stats.mean( { 7, 7, 7 } ), 7 )
				assert_fuzzy_equal( _.stats.mean{ 7, 1, 5, 3 }, 4 )
			end )
		end )
		
		context( 'stats.median', function()
			test( 'gives the median of the group', function()
				assert_fuzzy_equal( _.stats.median( 1, 2, 3, 4, 5 ), 3 )
			end )
			
			test( 'gives the median of the table', function()
				assert_fuzzy_equal( _.stats.median{ 4, 5, 9, 4, 1, 7, 13 }, 5 )
			end )
			
			test( 'gives the median of an un-sorted group.', function()
				assert_fuzzy_equal( _.stats.median( 5, 7, 3, 1, 10 ), 5 )
			end )
			
			test( 'gives the median of an un-even group.', function()
				assert_fuzzy_equal( _.stats.median( 1, 2, 3, 4, 5, 6 ), 3.5 )
				assert_fuzzy_equal( _.stats.median( 7, 8, 15, 4, 3, 19, 101, 32 ), 11.5 )
			end )
		end )
		
		context( 'stats.mode', function()
			test( 'gives the mode (most common) of the group and # of occurrences', function()
				assert_multiple_fuzzy_equal( { _.stats.mode( 1, 5, 6, 22, 2, 2, 1, 2 ) }, { 2, 3 } )
			end )
			
			test( 'gives the mode and # of occurrences of the table', function()
				assert_multiple_fuzzy_equal( { _.stats.mode{ 91, 0 , 83, 401, 92, 83, 200 } }, { 83, 2 } )
			end )
			
			test( 'returns false if the group has no mode', function()
				assert_false( _.stats.mode( 1, 5, 6, 8, 23423 ) )
			end )
			
			test( 'returns false if the group is bimodial', function()
				assert_false( _.stats.mode( 1, 23, 5, 23, 1 ) )
				assert_false( _.stats.mode{ 9, 8, 2, 3, 1, 9, 0, 8 } )
			end )
		end )
		
		context( 'stats.range', function()
			test( 'gets range (largest - smallest) of a set of numbers', function()
				assert_fuzzy_equal( _.stats.range( 1, 2, 3, 4 ), 3 )
				assert_fuzzy_equal( _.stats.range( 2, 6, 213, -213 ), 426 )
				assert_fuzzy_equal( _.stats.range( 2, 2, 2, 2 ), 0 )
			end )
			
			test( 'gets the range of a table', function()
				assert_fuzzy_equal( _.stats.range( { 1, 2, 3, 4 } ), 3 )
				assert_fuzzy_equal( _.stats.range{ 2, 6, 213, -213 }, 426 )
			end )
		end )
		
		context( 'math.root', function()
			test( 'gives the nth math.root of the first number', function()
				assert_fuzzy_equal( _.math.root( 4, 2 ), 2 )
				assert_fuzzy_equal( _.math.root( 9, 2 ), 3 )
				assert_fuzzy_equal( _.math.root( 125, 3 ), 5 )
				assert_fuzzy_equal( _.math.root( 100000, 5 ), 10 )
				assert_fuzzy_equal( _.math.root( math.pi, math.pi ), 1.43961949585 )
			end )
		end )
		
		context( 'math.prime', function()
			test( 'returns true if number is prime, false if composite (not prime)', function()
				assert_true( _.math.prime( 3 ) )
				assert_false( _.math.prime( 4 ) )
				assert_true( _.math.prime( 5 ) )
				assert_false( _.math.prime( 8 ) )
			end )
			
			test( 'returns false for any non-interger value or value <= 1', function()
				assert_false( _.math.prime( -2 ) )
			end )
		end )
		
		context( 'polygon.area', function()
			test( 'returns the area of a polygon made going clockwise/counter-clockwise.', function()
				assert_fuzzy_equal( _.polygon.area( 2, 2, 2, 5, 5, 5, 5, 2 ), 9 )
				assert_fuzzy_equal( _.polygon.area( 7, 4, 9, 2, 11, 4, 9, 6 ), 8 )
				assert_fuzzy_equal( _.polygon.area( 4, 7, 5, 6, 6, 7, 8, 5, 8, 4, 7, 3, 3, 3, 2, 4, 2, 5 ), 18 )
				assert_fuzzy_equal( _.polygon.area( 2, 2, 3, 3, 2, 4, 2, 6, 1, 7, 2, 7, 4, 6, 5, 7, 7, 4, 5, 5, 4.14, 4.02, 3, 5, 3, 4, 4, 3, 5, 4, 6, 3, 7, 3, 7, 2, 4, 2, 3, 1 ), 16.48 )
			end )
			
			test( 'returns the area of a polygon etc. using a table.', function()
				assert_fuzzy_equal( _.polygon.area{ 2, 2, 2, 5, 5, 5, 5, 2 }, 9 )
			end ) 
		end )
		
		context( 'math.round', function()
			test( 'math.rounds a number (up or down)', function()
				assert_fuzzy_equal( _.math.round( .99999 ), 1 )
				assert_fuzzy_equal( _.math.round( 1 / 3 ), 0 )
				assert_fuzzy_equal( _.math.round( math.pi ), 3 )
				assert_fuzzy_equal( _.math.round( .1908094820398402938402938409234 ), 0 )
				assert_fuzzy_equal( _.math.round( 12345), 12345 )
			end )
		end )
		
		context( 'math.getAngle', function()
			test( 'returns the radians needed to get to start (1st 2), to location (2nd 2), w/ orientation (assumed up).', function()
				assert_fuzzy_equal( _.math.getAngle( 0, 0, 3, 3, 'up' ), 2.35619449 )
				assert_fuzzy_equal( _.math.getAngle( 0, 0, 3, 3, 'right' ), 0.785398163 )
				assert_fuzzy_equal( _.math.getAngle( 0, 0, 3, 3, 'down' ), -0.785398163 )
				assert_fuzzy_equal( _.math.getAngle( 0, 0, 3, 3, 'left' ), -2.35619449 )
			end )
		end )
		
		context( 'polygon.centroid', function()
			test( 'returns the centroid of a polygon.', function()
				assert_multiple_fuzzy_equal( { _.polygon.centroid( 0, 100, 100, 50, 100, 100 ) }, { 66.666666, 83.333333 } )
				assert_multiple_fuzzy_equal( { _.polygon.centroid( 3, 5, 4, 4, 6, 4, 6, 6, 5, 7, 4, 7 ) }, { 4.666666, 5.38095238 } )
				assert_multiple_fuzzy_equal( { _.polygon.centroid( 2, 2, 5, 2, 6, 3, 6, 4, 5, 5, 2, 5, 2, 4, 4, 4, 5, 3 ) }, { 4.23809523, 3.69047619 } )
				assert_multiple_fuzzy_equal( { _.polygon.centroid( 4, 3, 3, 6, 9, 7, 12, 3, 10, 2, 8, 5, 7, 4, 7, 2, 6, 4, 6, 5, 5, 4, 6, 2, 5, 1, 3, 2 ) }, { 7.012578616, 4.377358490 } )
				assert_multiple_fuzzy_equal( { _.polygon.centroid( 2, 5, 4, 7, 8, 7, 11, 6, 15, 5, 14, 9, 16, 9, 18, 8, 19, 5, 18, 3, 16, 2, 14, 2, 14, 3, 16, 3, 18, 4, 17, 7, 16, 8, 13, 5, 13, 4, 11, 4, 10, 5, 7, 6, 7, 4, 4, 4 ) }, { 10.7810945, 5.57711442786 } )
			end )
		end )
		
		context( 'math.log', function()
			test( 'returns the nth math.logarithm, with n being the second argument.', function()
				assert_fuzzy_equal( _.math.log( 1, 2 ), 0 )
				assert_fuzzy_equal( _.math.log( 2, 2 ), 1 )
				assert_fuzzy_equal( _.math.log( 3, 2 ), 1.584962500721156 )
				assert_fuzzy_equal( _.math.log( 10, 2 ), 3.321928094887362 )
				assert_fuzzy_equal( _.math.log( 5, 3 ), 1.4649735207179 )
				assert_fuzzy_equal( _.math.log( 7, 2 ), 2.807354922057604 )
			end )
		end )
		
		context( 'math.summation', function()
			test( 'returns the sumation.', function()
				assert_fuzzy_equal( _.math.summation( 3, 6, function( i ) return ( i * ( i + 1 ) ) / 2 end ), 52 )
				assert_fuzzy_equal( _.math.summation( 1, 10, function( i ) return ( i * 2 ) end ), 110 )
			end )

			test( 'can take the previous value in the argument.', function()
				assert_fuzzy_equal( _.math.summation( 1, 5, function( i, t ) if t[i-1] then return i + t[i-1] else return 1 end end ), 35 )
			end )
			
			test( 'returns false if math.huge is second argument.', function()
				assert_false( _.math.summation( 1, math.huge, function( i ) return i end ) )
				assert_false( _.math.summation( 1, -math.huge, function( i ) return i end ) )
			end ) 
		end )
		
		context( 'math.percentOfChange', function()
			test( 'gives the % of change of two numbers.', function()
				assert_fuzzy_equal( _.math.percentOfChange( 2, 4 ), 1 )
				assert_fuzzy_equal( _.math.percentOfChange( 10, 0 ), -1 )
				assert_fuzzy_equal( _.math.percentOfChange( 40, 40 ), 0 )
			end )
			
			test( 'gets the % of change from negative #s.', function()
				assert_fuzzy_equal( _.math.percentOfChange( -15, 15 ), 2 )
			end )
			
			test( 'returns false if getting from 0.', function()
				assert_false( _.math.percentOfChange( 0, 10 ) )
			end )
		end )
		
		context( 'math.percent', function()
			test( 'gives the % of the 2nd number.', function()
				assert_fuzzy_equal( _.math.percent( 1, 2 ), 4 )
				assert_fuzzy_equal( _.math.percent( -1, 10 ), 0 )
				assert_fuzzy_equal( _.math.percent( 0, 40 ), 40 )
				assert_fuzzy_equal( _.math.percent( 2, -15 ), 15 )
				assert_fuzzy_equal( _.math.percent( 10, 0 ), 0 )
			end )
		end )
		
		context( 'circle.checkPoint', function()
			test( 'returns true if the point is on the circle.', function()
				assert_true( _.circle.checkPoint( 3, 4, 2, 1, 4 ) )
				assert_false( _.circle.checkPoint( 8, 5, 3, 3, 4 ) )
				assert_false( _.circle.checkPoint( 8, 5, 3, 8, 9 ) )
				assert_true( _.circle.checkPoint( 8, 5, 2, 8, 3 ) )
				assert_true( _.circle.checkPoint( 13, 3, 5, 13, -2 ) )
			end )
		end )
		
		context( 'circle.circumference', function()
			test( 'returns the circumference of the circle.', function()
				assert_fuzzy_equal( _.circle.circumference( 1 ), 6.28318530718 )
				assert_fuzzy_equal( _.circle.circumference( 2 ), 12.5663706144 )
				assert_fuzzy_equal( _.circle.circumference( 3 ), 18.8495559215 )
				assert_fuzzy_equal( _.circle.circumference( 4 ), 25.1327412287 )
				assert_fuzzy_equal( _.circle.circumference( 10 ), 62.8318530718 )
			end )
		end )
		
		context( 'math.quadraticFactor', function()
			test( 'returns the 2 solutions for x in the quadratic equation.', function()
				assert_multiple_fuzzy_equal( { _.math.quadraticFactor( 1, 3, -4 ) }, { -4, 1 } )
				assert_multiple_fuzzy_equal( { _.math.quadraticFactor( 2, -4, -3 ) }, { -.58113883, 2.5811388 } )
				assert_multiple_fuzzy_equal( { _.math.quadraticFactor( 2, 5, -3 ) }, { -3, .5 } )
			end )
			
			test( 'returns 1 solution for x (if applicable).', function()
				assert_multiple_fuzzy_equal( { _.math.quadraticFactor( 9, 12, 4 ) }, { -2 / 3, -2 / 3 } )
			end )
			
			test( 'returns false if no solution.', function()
				assert_false( _.math.quadraticFactor( 3, 4, 2 ) )
			end )
		end )
		
		context( 'circle.secant', function()
			test( 'returns if line is a secant, tan, or false using slope and y-intercept.', function()
				assert_multiple_fuzzy_equal( { _.circle.secant( 4, 9, 1, 0, 9 ) }, { 'secant', 3, 9, 5, 9 } )
				assert_multiple_fuzzy_equal( { _.circle.secant( 3, 8, 2, 0, 10 ) }, { 'tangent', 3, 10 } )
			end )
			
			test( 'returns if line is a secant, tan, or false using 2 points.', function()
				assert_multiple_fuzzy_equal( { _.circle.secant( 4, 9, 1, 0, 9, 6, 9 ) }, { 'secant', 3, 9, 5, 9 } )
				assert_multiple_fuzzy_equal( { _.circle.secant( 3, 8, 2, 0, 10, 3, 10 ) }, { 'tangent', 3, 10 } )
			end )
			
			test( 'can get vertical line slope intersections with points.', function()
				assert_multiple_fuzzy_equal( { _.circle.secant( 3, 8, 2, 0, 10, 3, 10 ) }, { 'tangent', 3, 10 } )
			end )
		end )
		
		context( 'circle.circlesIntersect', function()
			test( 'returns the points that intersect.', function()
				assert_multiple_fuzzy_equal( { _.circle.circlesIntersect( 1, 1, 1, 2, 2, 1 ) }, { 2, 1, 1, 2 } )
				assert_multiple_fuzzy_equal( { _.circle.circlesIntersect( 1, 1, 1, 4, 4, 3.60555127546 ) }, { 2, 1, 1, 2 } )
			end )
			
			test( 'returns only one set of point if there is only one point of intersection.', function()
				assert_multiple_fuzzy_equal( { _.circle.circlesIntersect( 1, 1, 1, 3, 1, 1 ) }, { 2, 1 } )
			end )
			
			test( 'returns true if the circles are coincident.', function()
				assert_true( _.circle.circlesIntersect( 1, 1, 1, 1, 1, 1 ) )
			end )
			
			test( 'returns false if the circles do not collide anywhere,', function()
				assert_false( _.circle.circlesIntersect( 5, 6, 1, 90, 2, 1 ) )
			end )
		end )
		
		context( 'line.segment.checkPoint', function()
			test( 'returns true if the point is on the line segment.', function()
				assert_true( _.line.segment.checkPoint( 0, 0, 2, 2, 1, 1 ) )
				assert_true( _.line.segment.checkPoint( 2, 4, 4, 6, 3, 5 ) )
				assert_true( _.line.segment.checkPoint( 1, 1, 3, 1, 2, 1 ) )
			end )
			
			test( 'returns false if the point is not on the line segment.', function()
				assert_false( _.line.segment.checkPoint( 0, 0, 2, 2, 1, 2 ) )
				assert_false( _.line.segment.checkPoint( 1, 1, 3, 1, 4, 1 ) )
			end )
		end )
		
		context( 'line.intersect', function()
			test( 'returns the x and y where the lines intersect.', function()
				assert_multiple_fuzzy_equal( { _.line.intersect( 1, 0, -1, 2 ) }, { 1, 1 } )
				assert_multiple_fuzzy_equal( { _.line.intersect( 1, 0, 2, 0, 0, 2 ) }, { 1, 1 } )
			end )
			
			test( 'can accept lines without a slope, too.', function()
				assert_multiple_fuzzy_equal( { _.line.intersect( 0, 2, 2, 1, 2, 3 ) }, { 2, 2 } )
			end )
			
			test( 'returns false if lines are parallel.', function()
				assert_false( _.line.intersect( 1, 1, 1, 2 ) )
				assert_false( _.line.intersect( 5, 0, 5, 6 ) )
			end )
		end )
		
		context( 'line.segment.intersect', function()
			test( 'returns the x and y where the line segments intersect.', function()
				assert_multiple_fuzzy_equal( { _.line.segment.intersect( 1, 1, 5, 3, 2, 3, 4, 1 ) }, { 3, 2 } )
				assert_multiple_fuzzy_equal( { _.line.segment.intersect( 1, 5, 3, 7, 3, 5, 1, 7 ) }, { 2, 6 } )
			end )
			
			test( 'returns false if off line segment.', function()
				assert_false( _.line.segment.intersect( 3, 7, 6, 8, 1, 6, 5, 4 ) )
				assert_false( _.line.segment.intersect( 3, 7, 6, 8, 1, 6, 5, 4 ) )
				assert_false( _.line.segment.intersect( 1, 6, 5, 4, 7, 3, 11, 1 ) )
			end )
		end )
		
		context( 'polygon.checkPoint', function()
			test( 'returns true if the point is in the polygon.', function()
				assert_true( _.polygon.checkPoint( 2, 2, 0, 0, 0, 4, 4, 4, 4, 0 ) )
				assert_true( _.polygon.checkPoint( 2, 4, 4, 2, 3, 3, 2, 3, 2, 2, 1, 2, 1, 5, 4, 5 ) )
				assert_true( _.polygon.checkPoint( 7.5, 4.5, 7, 2, 6, 3, 5, 2, 4, 3, 4, 5, 5, 6, 6, 5, 6, 4, 7, 4, 7, 5, 8, 5, 8, 4, 9, 4, 9, 5, 10, 6, 11, 5, 10, 4, 11, 3, 10, 2, 9, 3, 8, 2 ) )
			end )
			
			test( 'returns false if the point is outside the polygon.', function()
				assert_false( _.polygon.checkPoint( 7, 8, 0, 0, 0, 4, 4, 4, 4, 0 ) )
				assert_false( _.polygon.checkPoint( 3, 2, 4, 2, 3, 3, 2, 3, 2, 2, 1, 2, 1, 5, 4, 5 ) )
			end )
		end )
		
		context( 'line.closestPoint', function()
			test( 'returns the closest point to the line.', function()
				assert_multiple_fuzzy_equal( { _.line.closestPoint( 4, 2, 1, 1, 3, 5 ) }, { 2, 3 } )
				assert_multiple_fuzzy_equal( { _.line.closestPoint( 9, 0, 4, 5, 5, 2 ) }, { 6, -1 } )
				assert_multiple_fuzzy_equal( { _.line.closestPoint( 4, 8, 2, 8, 4, 6 ) }, { 3, 7 } )
				assert_multiple_fuzzy_equal( { _.line.closestPoint( 3, 4, 2, 3, 4, 3 ) }, { 3, 3 } )
				assert_multiple_fuzzy_equal( { _.line.closestPoint( 3, 3, 2, 4, 2, 2 ) }, { 2, 3 } )
			end )
		end )
		
		context( 'line.segmentIntersects.', function()
			test( 'returns the x and y if the line segment intersects.', function()
				assert_multiple_fuzzy_equal( { _.line.segmentIntersects( 3, 6, 5, 8, 3, 8, 5, 6 ) }, { 4, 7 } )
			end )
			
			test( 'returns the x and y of a vertical line.', function()
				assert_multiple_fuzzy_equal( { _.line.segmentIntersects( 0, 3, 2, 5, 1, 1, 1, 5 ) }, { 1, 4 } )
				assert_multiple_fuzzy_equal( { _.line.segmentIntersects( 3, 5, 3, 7, 1, 8, 4, 5 ) }, { 3, 6 } )
			end )
			
			test( 'returns the x and y of a horizontal line.', function()
				assert_multiple_fuzzy_equal( { _.line.segmentIntersects( 2, 4, 4, 4, 4, 3, 2, 5 ) }, { 3, 4 } )
				assert_multiple_fuzzy_equal( { _.line.segmentIntersects( 4, 6, 8, 8, 5, 8, 9, 8 ) }, { 8, 8 } )
			end )
		end )
		
		context( 'polygon.lineIntersects', function()
			test( 'returns true if the line (segment) intersects with the polygon.', function()
				assert_true( _.polygon.lineIntersects( 3, 7, 5, 4, 3, 5, 4, 4, 5, 5, 6, 4, 6, 6, 3, 6 ) )
				assert_true( _.polygon.lineIntersects( 2, 5, 7, 6, 3, 5, 4, 4, 5, 5, 6, 4, 6, 6, 3, 6 ) )
			end )
			
			test( 'returns fasle if the line does not intersect with the polygon.', function()
				assert_false( _.polygon.lineIntersects( 2, 5, 3, 7, 3, 5, 4, 4, 5, 5, 6, 4, 6, 6, 3, 6 ) )
			end )
		end )
		
		context( 'polygon.polygonIntersects', function()
			test( 'returns true if the polygons intersect.', function()
				assert_true( _.polygon.polygonIntersects( { 2, 6, 3, 8, 4, 6 }, { 3, 7, 2, 9, 4, 9 } ) )
			end )
			
			test( 'returns false if the polygons don\'t intersect.', function()
				assert_false( _.polygon.polygonIntersects( { 2, 6, 3, 8, 4, 6 }, { 4, 7, 3, 9, 5, 9 } ) )
			end )
		end )
		
		context( 'polygon.circleIntersects', function()
			test( 'returns true if the polygon intersects the circle.', function()
				assert_true( _.polygon.circleIntersects( 3, 5, 2, 2, 6, 4, 6, 3, 8 ) )
			end )
			
			test( 'returns false if the polygon does not intersect the circle.', function()
				assert_false( _.polygon.circleIntersects( 3, 3, 2, 2, 6, 4, 6, 3, 8 ) )
			end )
		end )
	end 
)