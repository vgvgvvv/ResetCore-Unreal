---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dieseldong.
--- DateTime: 2021/6/23 0023 12:17
---

require("define")

local CheckMap = {}

---@class CheckSingleConfigResult
local CheckSingleConfigResult = class("CheckSingleConfigResult")

---@param desc string
function CheckSingleConfigResult:ctor(desc)
    ---@type string
    self.desc = desc
    ---@type CheckSingleRuleResult[]
    self.msgs = {}
end

function CheckSingleConfigResult:HasAnyMsg()
    return #self.msgs > 0
end

---@param msg CheckSingleRuleResult
function CheckSingleConfigResult:AppendRuleCheckResult(msg)
    self.msgs[#self.msgs + 1] = msg
end

function CheckSingleConfigResult:ToString()
    local content = ""
    content = content.."当前检查配置："..self.desc.."\n"

    for _, ruleResult in pairs(self.msgs) do
        content = content.. ruleResult:ToString().."\n"
    end
    return content
end

---@class CheckSingleRuleResult
local CheckSingleRuleResult = class("CheckRuleListResult")

---@param rule MapRule
function CheckSingleRuleResult:ctor(rule)
    ---@type MapRule
    self.rule = rule
    ---@type CheckSingleMapResult[]
    self.msgs = {}
end

function CheckSingleRuleResult:HasAnyMsg()
    return #self.msgs > 0
end

---@param msg CheckSingleMapResult
function CheckSingleRuleResult:AppendMapCheckResult(msg)
    self.msgs[#self.msgs + 1] = msg
end

function CheckSingleRuleResult:ToString()
    local content = ""
    content = content.."执行检查指令："..self.rule.Desc.."\n"

    for _, mapMsg in pairs(self.msgs) do
        content = content..mapMsg:ToString().."\n"
    end
    return content
end

---@class CheckSingleMapResult
local CheckSingleMapResult = class("CheckSingleMapResult")

---@param assetData AssetData
function CheckSingleMapResult:ctor(assetData)
    self.assetData = assetData
    ---@type CheckFuncResult[]
    self.msgs = { }
end

---@param msg CheckFuncResult
function CheckSingleMapResult:AppendFuncCheckResult(msg)
    self.msgs[#self.msgs + 1] = msg
end

function CheckSingleMapResult:HasAnyMsg()
    return #self.msgs > 0
end

function CheckSingleMapResult:ToString()

    local content = ""
    content = content.."当前检查地图名："..self.assetData.PackageName.."\n"
    for _, msg in pairs(self.msgs) do
        content = content..msg:ToString().."\n"
    end
    return content
end

---@class CheckFuncResult
local CheckFuncResult = class("CheckFuncResult")

---@param desc string
---@param msgs string[]
function CheckFuncResult:ctor(desc, msgs)
    self.desc = desc
    self.msgs = msgs
end

function CheckFuncResult:HasAnyMsg()
    return #self.msgs > 0
end

function CheckFuncResult:ToString()
    local content = ""
    content = content.."检查函数："..self.desc.."\n"
    for _, msg in pairs(self.msgs) do
        content = content..msg.."\n"
    end
    return content
end

--- 获得所有需要检查的地图
---@param mapAssets AssetData[]
---@param rule MapRule
---@return AssetData[]
function CheckMap._GetMapNeedCheck(mapAssets, rule)
    local targetMaps = linq.table(mapAssets):where(function(arg)
        ---@type AssetData
        local asset = arg
        for _,regex in pairs(rule.Regex) do
            if LuaCommon.IsMatch(asset.PackageName, regex) then
                return true
            end
        end
        return false
    end):toArray()
    return targetMaps
end

---@param rule MapRule
---@return CheckSingleRuleResult
function CheckMap._CheckRuleFunc(targetMaps, rule)

    local checkRuleListResult = CheckSingleRuleResult.New(rule)

    for _, map in pairs(targetMaps) do

        local mapCheckResult = CheckMap._CheckMapFunc(map, rule)

        if mapCheckResult:HasAnyMsg() then
            checkRuleListResult:AppendMapCheckResult(mapCheckResult)
        end
    end

    return checkRuleListResult
end

---@param map AssetData
---@param rule MapRule
function CheckMap._CheckMapFunc(map, rule)
    local mapCheckResult = CheckSingleMapResult.New(map)

    ---@type MapCheckCommandlet
    local MapCheckCommandlet = import("MapCheckCommandlet")
    local succ = MapCheckCommandlet.LoadLevel(map.PackageName)

    if not succ then
        error("cannot load map!! mapName : ".. map.PackageName)
    end

    for _,checkFunc in pairs(rule.CheckFuncs) do
        local msgs = checkFunc.Func(map, checkFunc.Args)

        local ruleCheckResult = CheckFuncResult.New(checkFunc.Desc, msgs)

        if ruleCheckResult:HasAnyMsg() then
            mapCheckResult:AppendFuncCheckResult(ruleCheckResult)
        end
    end

    return mapCheckResult
end


---@param mapAssets AssetData[]
---@param config MapConfig
---@return CheckSingleConfigResult
function CheckMap.CheckSingleConfig(mapAssets, config)

    local checkSingleConfigResult = CheckSingleConfigResult.New(config.Desc)

    for i, rule in pairs(config.Rules) do

        ---@type AssetData[]
        local targetMaps = CheckMap._GetMapNeedCheck(mapAssets, rule)

        print("begin check rule : "..rule.Desc.." check map count "..#targetMaps)

        local checkRuleResult = CheckMap._CheckRuleFunc(targetMaps, rule)

        if checkRuleResult:HasAnyMsg() then
            checkSingleConfigResult:AppendRuleCheckResult(checkRuleResult)
        end

        print("end check rule : "..rule.Desc.." resultTable count is "..#checkSingleConfigResult.msgs)
    end

    return checkSingleConfigResult
end

return CheckMap